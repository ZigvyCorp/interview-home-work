{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoang\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\test\\\\interview\\\\src\\\\Components\\\\Page.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { Pagination } from './Pagination';\nimport { ListPost } from './ListPost';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, useParams } from 'react-router';\nimport { setSearchPosts } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Page = () => {\n  _s();\n\n  // const [search, setSearch] = useState('');\n  const searchRef = useRef();\n  const {\n    num\n  } = useParams();\n  let currentPage = null;\n\n  if (num) {\n    currentPage = num;\n  } else {\n    currentPage = 1;\n  }\n\n  const dispatch = useDispatch();\n  const postsPerPage = useSelector(state => state.postsPerPage);\n  const posts = useSelector(state => state.posts);\n  const searchPosts = useSelector(state => state.searchPosts);\n  const indexOfLastPage = currentPage * postsPerPage;\n  const indexOfFirstPage = indexOfLastPage - postsPerPage;\n  const currentPosts = searchPosts.slice(indexOfFirstPage, indexOfLastPage);\n\n  const handleSearch = () => {\n    const searchText = searchRef.current.value.trim();\n    const newPosts = posts.filter(post => post.title.indexOf(searchText) !== -1);\n    dispatch(setSearchPosts(newPosts)); // dispatch(setSearch(searchText));\n    // window.location.href = \"http://localhost:3000/page/1\";\n  }; // if(search !== '') {\n  //   return (\n  //     <Redirect to=\"/page/1\"></Redirect>\n  //   );\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar navbar-dark bg-primary\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid input-group\",\n        style: {\n          width: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control me-2\",\n          type: \"search\",\n          placeholder: \"Search\",\n          \"aria-label\": \"Search\",\n          ref: searchRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-light text-dark\",\n          type: \"submit\",\n          onClick: () => handleSearch(),\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"h2 mt-5 mb-3 text-danger text-center\",\n      children: [\"LIST OF POSTS ON HOME PAGE \\\"Page \", currentPage, \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }, this), currentPosts.map(post => {\n      return /*#__PURE__*/_jsxDEV(ListPost, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 26\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Pagination, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Page, \"S+ola/9V6Elc+xCXksPN5SWsWMo=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["C:/Users/hoang/OneDrive/Máy tính/test/interview/src/Components/Page.js"],"names":["React","useRef","useState","Pagination","ListPost","useDispatch","useSelector","Redirect","useParams","setSearchPosts","Page","searchRef","num","currentPage","dispatch","postsPerPage","state","posts","searchPosts","indexOfLastPage","indexOfFirstPage","currentPosts","slice","handleSearch","searchText","current","value","trim","newPosts","filter","post","title","indexOf","width","map","id"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport {Pagination} from './Pagination';\r\nimport { ListPost } from './ListPost';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport { setSearchPosts} from '../actions';\r\n\r\n\r\nexport const Page = () => {\r\n  // const [search, setSearch] = useState('');\r\n  const searchRef = useRef();\r\n\r\n    const {num} = useParams();\r\n    let currentPage = null;\r\n    if(num) {\r\n      currentPage = num;\r\n    }\r\n    else {\r\n      currentPage = 1;\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const postsPerPage = useSelector(state => state.postsPerPage);\r\n    const posts = useSelector(state => state.posts);\r\n    const searchPosts = useSelector(state => state.searchPosts);\r\n\r\n    const indexOfLastPage = currentPage * postsPerPage;\r\n    const indexOfFirstPage = indexOfLastPage - postsPerPage;\r\n    const currentPosts = searchPosts.slice(indexOfFirstPage, indexOfLastPage);\r\n\r\n    const handleSearch = () => {\r\n      const searchText = searchRef.current.value.trim();\r\n      const newPosts = posts.filter(post => post.title.indexOf(searchText) !== -1);\r\n      dispatch(setSearchPosts(newPosts));\r\n      // dispatch(setSearch(searchText));\r\n      // window.location.href = \"http://localhost:3000/page/1\";\r\n    }\r\n\r\n    // if(search !== '') {\r\n    //   return (\r\n    //     <Redirect to=\"/page/1\"></Redirect>\r\n    //   );\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n              <nav className=\"navbar navbar-dark bg-primary\">\r\n                <div className=\"container-fluid input-group\" style={{width: '500px'}}>\r\n                  \r\n                    <input className=\"form-control me-2\" \r\n                    type=\"search\" placeholder=\"Search\" aria-label=\"Search\"\r\n                      ref={searchRef}\r\n                    /> \r\n                    <button className=\"btn btn-outline-light text-dark\" \r\n                    type=\"submit\"  onClick={() => handleSearch()}\r\n                    >Search</button>\r\n                  \r\n                </div>\r\n              </nav>\r\n              \r\n              <p className=\"h2 mt-5 mb-3 text-danger text-center\">LIST OF POSTS ON HOME PAGE \"Page {currentPage}\"</p>\r\n              {/* {\r\n                search !== '' && (<p className=\"h4 mb-3 text-info\">\r\n                    Search: \"<em className=\"text-danger\">{search}</em>\"</p>)\r\n              } */}\r\n              {\r\n                currentPosts.map(post => {\r\n                  return <ListPost post={post} key={post.id} />;\r\n                })\r\n              }\r\n              <Pagination />\r\n            </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}