{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport Api from '...'; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(Api.fetchUser, action.payload.userId);\n    yield put({\n      type: \"USER_FETCH_SUCCEEDED\",\n      user: user\n    });\n  } catch (e) {\n    yield put({\n      type: \"USER_FETCH_FAILED\",\n      message: e.message\n    });\n  }\n}\n/*\r\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\r\n  Allows concurrent fetches of user.\r\n*/\n\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nfunction* mySaga() {\n  yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["C:/Users/hoang/OneDrive/Máy tính/test/interview/src/saga/index.js"],"names":["call","put","takeEvery","takeLatest","Api","fetchUser","action","user","payload","userId","type","e","message","mySaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAOC,GAAP,MAAgB,KAAhB,C,CAEA;;AACA,UAAUC,SAAV,CAAoBC,MAApB,EAA4B;AACzB,MAAI;AACD,UAAMC,IAAI,GAAG,MAAMP,IAAI,CAACI,GAAG,CAACC,SAAL,EAAgBC,MAAM,CAACE,OAAP,CAAeC,MAA/B,CAAvB;AACA,UAAMR,GAAG,CAAC;AAACS,MAAAA,IAAI,EAAE,sBAAP;AAA+BH,MAAAA,IAAI,EAAEA;AAArC,KAAD,CAAT;AACF,GAHD,CAGE,OAAOI,CAAP,EAAU;AACT,UAAMV,GAAG,CAAC;AAACS,MAAAA,IAAI,EAAE,mBAAP;AAA4BE,MAAAA,OAAO,EAAED,CAAC,CAACC;AAAvC,KAAD,CAAT;AACF;AACH;AAED;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAUC,MAAV,GAAmB;AACjB,QAAMV,UAAU,CAAC,sBAAD,EAAyBE,SAAzB,CAAhB;AACD;;AAED,eAAeQ,MAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\r\nimport Api from '...'\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* fetchUser(action) {\r\n   try {\r\n      const user = yield call(Api.fetchUser, action.payload.userId);\r\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\r\n   } catch (e) {\r\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\r\n   }\r\n}\r\n\r\n/*\r\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\r\n  Allows concurrent fetches of user.\r\n*/\r\n\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nfunction* mySaga() {\r\n  yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\r\n}\r\n\r\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}