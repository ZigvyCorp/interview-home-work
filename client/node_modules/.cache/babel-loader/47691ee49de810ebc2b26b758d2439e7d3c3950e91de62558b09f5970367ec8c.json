{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { getPosts, getCommentsByPost } from '../util/js/APIs.js';\nfunction* watchGetPosts() {\n  try {\n    const result = yield call(getPosts);\n    console.log(1);\n    if (result && result.status === 200) {\n      yield put({\n        type: 'GET_ALL_POSTS_SUCCESS',\n        payload: result\n      });\n      yield put({\n        type: 'SET_GLOBAL_LOADING',\n        payload: false\n      });\n    } else {\n      yield put({\n        type: 'GET_ALL_POSTS_FAILURE'\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: 'GET_ALL_POSTS_FAILURE',\n      payload: error.response.message\n    });\n  }\n}\nfunction* watchGetUser() {\n  yield put({\n    type: 'GET_USER_SUCCESS'\n  });\n}\nfunction* Saga() {\n  yield takeLatest('SET_GLOBAL_LOADING', watchGetPosts);\n  yield takeLatest('SET_GLOBAL_LOADING', watchGetUser);\n}\n_c = Saga;\nexport default Saga;\nvar _c;\n$RefreshReg$(_c, \"Saga\");","map":{"version":3,"names":["call","put","takeLatest","getPosts","getCommentsByPost","watchGetPosts","result","console","log","status","type","payload","error","response","message","watchGetUser","Saga","_c","$RefreshReg$"],"sources":["C:/Users/Le Phuoc Dat/Downloads/Code/ZIGVY/interview-home-work/src/redux/saga.js"],"sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { getPosts, getCommentsByPost } from '../util/js/APIs.js';\r\n\r\nfunction* watchGetPosts() {\r\n  try {\r\n    const result = yield call(getPosts);\r\n    console.log(1);\r\n    if (result && result.status === 200) {\r\n      yield put({ type: 'GET_ALL_POSTS_SUCCESS', payload: result });\r\n      yield put({ type: 'SET_GLOBAL_LOADING', payload: false });\r\n    } else {\r\n      yield put({ type: 'GET_ALL_POSTS_FAILURE' });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: 'GET_ALL_POSTS_FAILURE',\r\n      payload: error.response.message,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetUser() {\r\n  yield put({ type: 'GET_USER_SUCCESS' });\r\n}\r\n\r\nfunction* Saga() {\r\n  yield takeLatest('SET_GLOBAL_LOADING', watchGetPosts);\r\n  yield takeLatest('SET_GLOBAL_LOADING', watchGetUser);\r\n}\r\n\r\nexport default Saga;\r\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,SAASC,QAAQ,EAAEC,iBAAiB,QAAQ,oBAAoB;AAEhE,UAAUC,aAAaA,CAAA,EAAG;EACxB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMN,IAAI,CAACG,QAAQ,CAAC;IACnCI,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,IAAIF,MAAM,IAAIA,MAAM,CAACG,MAAM,KAAK,GAAG,EAAE;MACnC,MAAMR,GAAG,CAAC;QAAES,IAAI,EAAE,uBAAuB;QAAEC,OAAO,EAAEL;MAAO,CAAC,CAAC;MAC7D,MAAML,GAAG,CAAC;QAAES,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IAC3D,CAAC,MAAM;MACL,MAAMV,GAAG,CAAC;QAAES,IAAI,EAAE;MAAwB,CAAC,CAAC;IAC9C;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMX,GAAG,CAAC;MACRS,IAAI,EAAE,uBAAuB;MAC7BC,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACC;IAC1B,CAAC,CAAC;EACJ;AACF;AAEA,UAAUC,YAAYA,CAAA,EAAG;EACvB,MAAMd,GAAG,CAAC;IAAES,IAAI,EAAE;EAAmB,CAAC,CAAC;AACzC;AAEA,UAAUM,IAAIA,CAAA,EAAG;EACf,MAAMd,UAAU,CAAC,oBAAoB,EAAEG,aAAa,CAAC;EACrD,MAAMH,UAAU,CAAC,oBAAoB,EAAEa,YAAY,CAAC;AACtD;AAACE,EAAA,GAHSD,IAAI;AAKd,eAAeA,IAAI;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}