{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport * as api from '../../api';\n\nfunction* fetchPostsSaga(action) {\n  try {\n    const posts = yield call(api.fetchPosts);\n    yield put(actions.getPosts.getPostsSuccess(posts.data));\n  } catch (err) {\n    console.error(err);\n    yield put(actions.getPosts.getPostsFailure(err));\n  }\n}\n\nfunction* createPostSaga(action) {\n  try {\n    const post = yield call(api.createPost, action.payload);\n    yield put(actions.createPost.createPostSuccess(post.data));\n  } catch (err) {\n    console.error(err);\n    yield put(actions.createPost.createPostFailure(err));\n  }\n}\n\nfunction* updatePostSaga(action) {\n  try {\n    const updatedPost = yield call(api.updatePost, action.payload);\n    yield put(actions.updatePost.updatePostSuccess(updatedPost.data));\n  } catch (err) {\n    console.error(err);\n    yield put(actions.updatePost.updatePostFailure(err));\n  }\n}\n\nfunction* mySaga() {\n  yield takeLatest(actions.getPosts.getPostsRequest, fetchPostsSaga);\n  yield takeLatest(actions.createPost.createPostRequest, createPostSaga);\n  yield takeLatest(actions.updatePost.updatePostRequest, updatePostSaga);\n} // generator function ES6\n\n\nexport default mySaga;","map":{"version":3,"sources":["C:/Users/tttro/mern-app-client/src/redux/sagas/index.js"],"names":["takeLatest","call","put","actions","api","fetchPostsSaga","action","posts","fetchPosts","getPosts","getPostsSuccess","data","err","console","error","getPostsFailure","createPostSaga","post","createPost","payload","createPostSuccess","createPostFailure","updatePostSaga","updatedPost","updatePost","updatePostSuccess","updatePostFailure","mySaga","getPostsRequest","createPostRequest","updatePostRequest"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AAC/B,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMN,IAAI,CAACG,GAAG,CAACI,UAAL,CAAxB;AACA,UAAMN,GAAG,CAACC,OAAO,CAACM,QAAR,CAAiBC,eAAjB,CAAiCH,KAAK,CAACI,IAAvC,CAAD,CAAT;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMV,GAAG,CAACC,OAAO,CAACM,QAAR,CAAiBM,eAAjB,CAAiCH,GAAjC,CAAD,CAAT;AACD;AACF;;AAED,UAAUI,cAAV,CAAyBV,MAAzB,EAAiC;AAC/B,MAAI;AACF,UAAMW,IAAI,GAAG,MAAMhB,IAAI,CAACG,GAAG,CAACc,UAAL,EAAiBZ,MAAM,CAACa,OAAxB,CAAvB;AACA,UAAMjB,GAAG,CAACC,OAAO,CAACe,UAAR,CAAmBE,iBAAnB,CAAqCH,IAAI,CAACN,IAA1C,CAAD,CAAT;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMV,GAAG,CAACC,OAAO,CAACe,UAAR,CAAmBG,iBAAnB,CAAqCT,GAArC,CAAD,CAAT;AACD;AACF;;AAED,UAAUU,cAAV,CAAyBhB,MAAzB,EAAiC;AAC/B,MAAI;AACF,UAAMiB,WAAW,GAAG,MAAMtB,IAAI,CAACG,GAAG,CAACoB,UAAL,EAAiBlB,MAAM,CAACa,OAAxB,CAA9B;AACA,UAAMjB,GAAG,CAACC,OAAO,CAACqB,UAAR,CAAmBC,iBAAnB,CAAqCF,WAAW,CAACZ,IAAjD,CAAD,CAAT;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMV,GAAG,CAACC,OAAO,CAACqB,UAAR,CAAmBE,iBAAnB,CAAqCd,GAArC,CAAD,CAAT;AACD;AACF;;AAED,UAAUe,MAAV,GAAmB;AACjB,QAAM3B,UAAU,CAACG,OAAO,CAACM,QAAR,CAAiBmB,eAAlB,EAAmCvB,cAAnC,CAAhB;AACA,QAAML,UAAU,CAACG,OAAO,CAACe,UAAR,CAAmBW,iBAApB,EAAuCb,cAAvC,CAAhB;AACA,QAAMhB,UAAU,CAACG,OAAO,CAACqB,UAAR,CAAmBM,iBAApB,EAAuCR,cAAvC,CAAhB;AACD,C,CAED;;;AAEA,eAAeK,MAAf","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\nimport * as api from '../../api';\r\n\r\nfunction* fetchPostsSaga(action) {\r\n  try {\r\n    const posts = yield call(api.fetchPosts);\r\n    yield put(actions.getPosts.getPostsSuccess(posts.data));\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put(actions.getPosts.getPostsFailure(err));\r\n  }\r\n}\r\n\r\nfunction* createPostSaga(action) {\r\n  try {\r\n    const post = yield call(api.createPost, action.payload);\r\n    yield put(actions.createPost.createPostSuccess(post.data));\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put(actions.createPost.createPostFailure(err));\r\n  }\r\n}\r\n\r\nfunction* updatePostSaga(action) {\r\n  try {\r\n    const updatedPost = yield call(api.updatePost, action.payload);\r\n    yield put(actions.updatePost.updatePostSuccess(updatedPost.data));\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put(actions.updatePost.updatePostFailure(err));\r\n  }\r\n}\r\n\r\nfunction* mySaga() {\r\n  yield takeLatest(actions.getPosts.getPostsRequest, fetchPostsSaga);\r\n  yield takeLatest(actions.createPost.createPostRequest, createPostSaga);\r\n  yield takeLatest(actions.updatePost.updatePostRequest, updatePostSaga);\r\n}\r\n\r\n// generator function ES6\r\n\r\nexport default mySaga;\r\n"]},"metadata":{},"sourceType":"module"}